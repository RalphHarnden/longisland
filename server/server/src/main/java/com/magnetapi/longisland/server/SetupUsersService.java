/*
 * Generated by Maven archetype
 */
package com.magnetapi.longisland.server;

import com.magnet.api.MagnetUri;
import com.magnet.common.api.IterableResource;
import com.magnet.core.api.PostConstruct;
import com.magnet.core.api.Startup;
import com.magnet.model.api.Resource;
import com.magnet.model.api.ResourceAlreadyExistsException;
import com.magnet.model.api.ResourceManager;
import com.magnet.model.api.ResourceQuery;
import com.magnet.model.api.common.EntityFactory;
import com.magnet.user.api.Contact;
import com.magnet.user.api.ContactBuilder;
import com.magnet.user.api.SecurityGroup;
import com.magnet.user.api.SecurityGroupBuilder;
import com.magnet.user.api.User;
import com.magnet.user.api.UserAccount;
import com.magnet.user.api.UserAccountBuilder;
import com.magnet.user.api.UserBuilder;
import com.magnet.cmdline.common.AbstractCommandLineHandler;
import com.magnet.inject.NamedAlias;

import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.PrintWriter;

@Singleton
@NamedAlias({SetupUsersService.CML_ALIAS})
public class SetupUsersService extends AbstractCommandLineHandler {
  public static final String CML_ALIAS = "setupDefaultUser";
  private static final String USAGE = "<username> <password> - set default user credentials";

  @Inject
  private ResourceManager entityManager;


  @Override
  public boolean postStarted(PrintWriter writer, PrintWriter errWriter, String[] args, int argPos) {
    validate(args);
    String userName = args[1];
    try {
      ResourceQuery matcher = entityManager.getQueryBuilder(User.class)
          .addExpression("name", userName)
          .build();
      IterableResource<Resource> existingUsers = entityManager.query(matcher);
      if(existingUsers.iterator().hasNext()) {
        return true;
      }

      // add an account and credentials for basic auth.
      UserAccount restUserAccount = createUserAccountBuilder().
              name(userName).
              credentialType("cleartext").
              privateCredential(args[2].getBytes()).
              authority("magnet").
              build();

      // add basic profile information.
      Contact profile = createContactBuilder().
              firstName("Magnet").
              lastName("Test").
              name("Magnet.Test").
              build();

      User restUser = createUserBuilder().
              name("userver.test").
              account(restUserAccount).
              profile(profile).
              build();

      MagnetUri uri = entityManager.persist(restUser);
      assert(null != uri);

    } catch (ResourceAlreadyExistsException e) {
      e.printStackTrace();
    }

    return true;
  }

  @SuppressWarnings({ "unchecked", "rawtypes" })
  private UserAccountBuilder<UserAccount, ?> createUserAccountBuilder() {
    return (UserAccountBuilder) EntityFactory.createEntityBuilder(UserAccount.class);
  }

  @SuppressWarnings({ "unchecked", "rawtypes" })
  private UserBuilder<User, ?> createUserBuilder() {
    return (UserBuilder) EntityFactory.createEntityBuilder(User.class);
  }

  @SuppressWarnings({ "unchecked", "rawtypes" })
  private ContactBuilder<Contact, ?> createContactBuilder() {
    return (ContactBuilder) EntityFactory.createEntityBuilder(Contact.class);
  }

  @SuppressWarnings({ "unchecked", "rawtypes" })
  private SecurityGroupBuilder<SecurityGroup, ?> createSecurityGroupBuilder() {
    return (SecurityGroupBuilder) EntityFactory.createEntityBuilder(SecurityGroup.class);
  }

  private void createUser(String userName, String password) {
    try {
      ResourceQuery matcher = entityManager.getQueryBuilder(User.class)
          .addExpression("name", userName).build();
      IterableResource<Resource> existingUsers = entityManager.query(matcher);
      if(existingUsers.iterator().hasNext()) {
        return;
      }

      // add an account and credentials for basic auth.
      UserAccount restUserAccount = createUserAccountBuilder().
          name(userName).
          credentialType("cleartext").
          privateCredential(password.getBytes()).
          authority("magnet").
          build();

      // add basic profile information.
      Contact profile = createContactBuilder().
          firstName(userName).lastName("Test").
          name(userName).build();
      User restUser = createUserBuilder().
          name(userName).account(restUserAccount).
          profile(profile).build();

      MagnetUri uri = entityManager.persist(restUser);
      assert(null != uri);

    } catch (ResourceAlreadyExistsException e) {
      e.printStackTrace();
    }
  }

  private void createSecurityGroup(String groupName, String groupDn, String[] users) {
    SecurityGroupBuilder<SecurityGroup, ?> sgBuilder = createSecurityGroupBuilder();
    sgBuilder.description("Group for " + groupName).name(groupName)
        .distinguishedName(groupDn);

    for (String userName : users) {
      User user = getFirstMatchedUser(userName);
      if (user != null) {
        sgBuilder.user(user);
      }
    }

    try {
      entityManager.persist(sgBuilder.build());
    } catch (ResourceAlreadyExistsException e) {
      e.printStackTrace();
    }
  }

  private User getFirstMatchedUser(String userName) {
    ResourceQuery matcher = entityManager.getQueryBuilder(User.class)
        .addExpression("name", userName).build();
    IterableResource<Resource> users = entityManager.query(matcher);
    if(users.iterator().hasNext()) {
      return (User)(users.iterator().next());
    } else {
      return null;
    }
  }

  /**
   * Validation of the arguments
   * @param args <username> <user's password>
   */
  private void validate(String[] args) {
    if (args.length != 3) {
      throw new IllegalArgumentException("Invalid arguments, expecting: " + getLongUsage());
    }
  }

  @Override
  public String getShortUsage() {
    return USAGE;
  }

  @Override
  public String getLongUsage() {
    return USAGE;
  }
}
